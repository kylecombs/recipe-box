generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String?
  password        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  groceryLists    GroceryList[]
  mealPlans       MealPlan[]
  mealPlanRatings MealPlanRating[]
  recipes         Recipe[]
  recipeRatings   RecipeRating[]
  userRecipes     UserRecipe[]
}

model Recipe {
  id               String            @id @default(uuid())
  title            String
  description      String?           @db.Text
  sourceUrl        String?           @db.VarChar(500)
  imageUrl         String?           @db.Text
  prepTime         Int?
  cookTime         Int?
  servings         Int?
  userId           String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  instructions     String?           @db.Text
  parentId         String?
  version          Int               @default(1)
  isPublic         Boolean           @default(false)
  publishedAt      DateTime?
  saveCount        Int               @default(0)
  groceryListItems GroceryListItem[]
  ingredients      Ingredient[]
  instructionSteps Instruction[]
  notes            Note[]
  parent           Recipe?           @relation("RecipeVersions", fields: [parentId], references: [id])
  ratings          RecipeRating[]
  versions         Recipe[]          @relation("RecipeVersions")
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags             RecipeTag[]
  userRecipes      UserRecipe[]

  @@unique([sourceUrl, version])
  @@index([parentId], map: "Recipe_parentId_fkey")
  @@index([userId], map: "Recipe_userId_fkey")
  @@index([isPublic], map: "Recipe_isPublic_idx")
  @@index([saveCount], map: "Recipe_saveCount_idx")
}

model Ingredient {
  id        String   @id @default(uuid())
  name      String
  quantity  String?
  unit      String?
  notes     String?
  recipeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  original  String   @default("")
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId], map: "Ingredient_recipeId_fkey")
}

model Instruction {
  id          String   @id @default(uuid())
  stepNumber  Int
  description String   @db.Text
  recipeId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId], map: "Instruction_recipeId_fkey")
}

model Tag {
  id        String      @id @default(uuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  recipes   RecipeTag[]
}

model RecipeTag {
  recipeId   String
  tagId      String
  assignedAt DateTime @default(now())
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([recipeId, tagId])
  @@index([tagId], map: "RecipeTag_tagId_fkey")
}

model GroceryList {
  id        String            @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     GroceryListItem[]

  @@index([userId], map: "GroceryList_userId_fkey")
}

model GroceryListItem {
  id            String      @id @default(uuid())
  name          String
  quantity      String?     @db.VarChar(255)
  unit          String?     @db.VarChar(100)
  notes         String?
  checked       Boolean     @default(false)
  recipeId      String?
  groceryListId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  groceryList   GroceryList @relation(fields: [groceryListId], references: [id], onDelete: Cascade)
  recipe        Recipe?     @relation(fields: [recipeId], references: [id])

  @@index([groceryListId], map: "GroceryListItem_groceryListId_fkey")
  @@index([recipeId], map: "GroceryListItem_recipeId_fkey")
}

model Note {
  id        String   @id @default(uuid())
  text      String   @db.Text
  recipeId  String
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId], map: "Note_recipeId_fkey")
}

model MealPlan {
  id           String           @id @default(uuid())
  name         String
  description  String?          @db.Text
  days         Int
  weekPlan     Json
  shoppingList Json
  notes        String?          @db.Text
  userId       String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  ratings      MealPlanRating[]
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "MealPlan_userId_fkey")
}

model UserRecipe {
  id              String   @id @default(uuid())
  userId          String
  recipeId        String
  importedAt      DateTime @default(now())
  hasUpdates      Boolean  @default(false)
  savedFromPublic Boolean  @default(false)
  recipe          Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([recipeId], map: "UserRecipe_recipeId_fkey")
}

model RecipeRating {
  id        String   @id @default(uuid())
  rating    Int      // 1-5 star rating
  comment   String?  @db.Text
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([recipeId], map: "RecipeRating_recipeId_fkey")
  @@index([userId], map: "RecipeRating_userId_fkey")
}

model MealPlanRating {
  id         String   @id @default(uuid())
  rating     Int      // 1-5 star rating
  comment    String?  @db.Text
  userId     String
  mealPlanId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, mealPlanId])
  @@index([mealPlanId], map: "MealPlanRating_mealPlanId_fkey")
  @@index([userId], map: "MealPlanRating_userId_fkey")
}
